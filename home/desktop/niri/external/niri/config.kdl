// 此配置使用 KDL 格式：https://kdl.dev
// "/-" 用于注释掉下面的节点。
// 查看 wiki 获取配置的完整说明：
// https://github.com/YaLTeR/niri/wiki/Configuration:-Introduction

// 输入设备配置。
// 在 wiki 上查找选项的完整列表：
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
    keyboard {
        xkb {
            // 您可以设置规则、型号、布局、变体和选项。
            // 更多信息请参阅 xkeyboard-config(7)。

            // 例如：
            layout "us,cn"
            options "grp:win_space_toggle,compose:ralt"

            // 如果此部分为空，niri 将从 org.freedesktop.locale1 获取 xkb 设置。
            // 您可以使用 localectl set-x11-keymap 来控制这些设置。
        }

        // 启动时启用数字锁，省略此设置将禁用它。
        numlock
    }

    // 下面的部分包含 libinput 设置。
    // 省略设置会禁用它们，或保持默认值。
    // 这里所有注释掉的设置都是示例，不是默认值。
    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "two-finger"
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "no-scroll"
    }

    trackpoint {
        // off
        // natural-scroll
        // accel-speed 0.2
        // accel-profile "flat"
        // scroll-method "on-button-down"
        // scroll-button 273
        // scroll-button-lock
        // middle-emulation
    }

    // 取消注释此项可使鼠标移动到新聚焦的窗口中心。
    // warp-mouse-to-focus

    // 当鼠标移入窗口和输出时自动聚焦它们。
    // 设置 max-scroll-amount="0%" 使其仅在已完全显示在屏幕上的窗口上工作。
    // focus-follows-mouse max-scroll-amount="0%"
}

// 您可以通过名称配置输出，您可以通过在 niri 实例内运行 `niri msg outputs` 来找到名称。
// 内置笔记本显示器通常称为 "eDP-1"。
// 在 wiki 上查找更多信息：
// https://github.com/YaLTeR/niri/wiki/Configuration:-Outputs
// 记住通过删除 "/-" 来取消注释节点！
output "eDP-1" {
    // 取消注释此行以禁用此输出。
    // off

    // 输出的分辨率，可选地包含刷新率。
    // 格式为 "<宽度>x<高度>" 或 "<宽度>x<高度>@<刷新率>"。
    // 如果省略刷新率，niri 将选择该分辨率的最高刷新率。
    // 如果完全省略模式或无效，niri 将自动选择一个。
    // 在 niri 实例内运行 `niri msg outputs` 列出所有输出及其模式。
    mode "2560x1600@240"

    // 您可以使用整数或小数缩放，例如使用 1.5 表示 150% 缩放。
    scale 1.5

    // Transform 允许逆时针旋转输出，有效值为：
    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 和 flipped-270。
    transform "normal"

    // 输出在全局坐标空间中的位置。
    // 这影响方向性监视器操作如 "focus-monitor-left" 和光标移动。
    // 光标只能在直接相邻的输出之间移动。
    // 输出缩放和旋转必须考虑在内：
    // 输出以逻辑像素或缩放像素为单位。
    // 例如，一个 3840×2160 的输出，缩放为 2.0，逻辑大小为 1920×1080，
    // 所以要在右侧直接相邻放置另一个输出，将其 x 设置为 1920。
    // 如果位置未设置或导致重叠，输出将自动放置。
    position x=1280 y=0
}

// 影响窗口定位和大小的设置。
// 在 wiki 上查找更多信息：
// https://github.com/YaLTeR/niri/wiki/Configuration:-Layout
layout {
    // 设置窗口周围的间隙，以逻辑像素为单位。
    gaps 6

    // 改变焦点时何时将列居中，选项有：
    // - "never"，默认行为，聚焦屏幕外的列将保持在屏幕的左侧或右侧边缘。
    // - "always"，聚焦的列将始终居中。
    // - "on-overflow"，如果聚焦的列不能与之前聚焦的列一起显示，则将其居中。
    center-focused-column "never"

    // 您可以自定义 "switch-preset-column-width" (Mod+R) 切换的宽度。
    preset-column-widths {
        // Proportion 将宽度设置为输出宽度的一部分，考虑间隙。
        // 例如，您可以在输出上完美地安排四个大小为 "proportion 0.25" 的窗口。
        // 默认预设宽度是输出的 1/3、1/2 和 2/3。
        proportion 0.33333
        proportion 0.5
        proportion 0.66667

        // Fixed 精确设置逻辑像素的宽度。
        // fixed 1920
    }

    // 您还可以自定义 "switch-preset-window-height" (Mod+Shift+R) 切换的高度。
    // preset-window-heights { }

    // 您可以更改新窗口的默认宽度。
    default-column-width { proportion 0.85; }
    // 如果您将括号留空，窗口本身将决定其初始宽度。
    // default-column-width {}

    // 默认情况下，焦点环和边框渲染为窗口后面的实心背景矩形。
    // 也就是说，它们会通过半透明窗口显示出来。
    // 这是因为使用客户端装饰的窗口可能有任意形状。
    //
    // 如果您不喜欢这样，您应该取消注释下面的 `prefer-no-csd`。
    // Niri 将在同意省略客户端装饰的窗口*周围*绘制焦点环和边框。
    //
    // 或者，您可以使用名为 `draw-border-with-background` 的窗口规则来覆盖它。

    // 您可以更改焦点环的外观。
    focus-ring {
        // 取消注释此行以禁用焦点环。
        // off

        // 环从窗口向外延伸多少逻辑像素。
        width 2

        // 颜色可以通过多种方式设置：
        // - CSS 命名颜色："red"
        // - RGB 十六进制："#rgb"、"#rgba"、"#rrggbb"、"#rrggbbaa"
        // - CSS 类似表示法："rgb(255, 127, 0)"、rgba()、hsl() 和其他一些。

        // 活动监视器上环的颜色。
        active-color "#c7ff7f"

        // 非活动监视器上环的颜色。
        //
        // 焦点环只在活动窗口周围绘制，所以您能看到其 inactive-color 的唯一地方
        // 是在其他监视器上。
        inactive-color "#000000ff"

        // 您还可以使用渐变。它们优先于纯色。
        // 渐变的渲染与 CSS linear-gradient(角度, 起始颜色, 结束颜色) 相同。
        // 角度与 linear-gradient 中的相同，是可选的，
        // 默认为 180（从上到下的渐变）。
        // 您可以使用网上的任何 CSS linear-gradient 工具来设置这些。
        // 也支持更改色彩空间，请查看 wiki 获取更多信息。
        //
        active-gradient from="#80c8ff" to="#c7ff7f" angle=45

        // 您还可以相对于整个工作区视图来着色渐变，
        // 而不是仅相对于窗口本身。
        // 为此，设置 relative-to="workspace-view"。
        //
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // 您还可以添加边框。它类似于焦点环，但始终可见。
    border {
        // 设置与焦点环相同。
        // 如果启用边框，您可能想要禁用焦点环。
        off

        width 2
        active-color "#ffc87f"
        inactive-color "#505050"

        // 请求您注意的窗口周围的边框颜色。
        urgent-color "#9b0000"

        // 渐变可以使用几种不同的插值色彩空间。
        // 例如，这是通过 in="oklch longer hue" 的粉彩彩虹渐变。
        //
        // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // 您可以为窗口启用阴影。
    shadow {
        // 取消注释下一行以启用阴影。
        // on

        // 默认情况下，阴影只在其窗口周围绘制，而不在其后面绘制。
        // 取消注释此设置可使阴影在其窗口后面绘制。
        //
        // 注意 niri 无法知道 CSD 窗口的圆角半径。
        // 它必须假设窗口有方角，导致 CSD 圆角内出现阴影伪影。
        // 此设置修复了这些伪影。
        //
        // 但是，您可能想要设置 prefer-no-csd 和/或 geometry-corner-radius。
        // 然后，niri 将知道圆角半径并正确绘制阴影，
        // 而无需在窗口后面绘制。这些还将删除窗口绘制的客户端阴影（如果有的话）。
        //
        // draw-behind-window true

        // 您可以更改阴影的外观。下面的值以逻辑像素为单位，匹配 CSS box-shadow 属性。

        // Softness 控制阴影模糊半径。
        softness 30

        // Spread 扩展阴影。
        spread 5

        // Offset 相对于窗口移动阴影。
        offset x=0 y=5

        // 您还可以更改阴影颜色和不透明度。
        color "#0007"
    }

    // Struts 缩小窗口占用的区域，类似于 layer-shell 面板。
    // 您可以将它们视为一种外部间隙。它们以逻辑像素设置。
    // 左右 struts 将使侧边的下一个窗口始终可见。
    // 顶部和底部 struts 将简单地在 layer-shell 面板和常规间隙占用的区域之外添加外部间隙。
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// 添加这样的行在启动时生成进程。
// 注意将 niri 作为会话运行支持 xdg-desktop-autostart，
// 这可能更方便使用。
// 有关更多生成示例，请参阅下面的绑定部分。

// 此行启动 waybar，Wayland 合成器的常用栏。
spawn-at-startup "waybar"
spawn-at-startup "swww-daemon"

hotkey-overlay {
    // 取消注释此行以在启动时禁用"重要热键"弹出窗口。
    skip-at-startup
}

// 取消注释此行以要求客户端尽可能省略其客户端装饰。
// 如果客户端特别要求 CSD，请求将被接受。
// 此外，客户端将被告知它们是平铺的，删除一些客户端圆角。
// 此选项还将修复在一些半透明窗口后面绘制的边框/焦点环。
// 启用或禁用此选项后，您需要重启应用程序才能生效。
prefer-no-csd

// 您可以更改保存截图的路径。
// 前面的 ~ 将扩展为主目录。
// 路径使用 strftime(3) 格式化，为您提供截图日期和时间。
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// 您还可以将此设置为 null 以禁用将截图保存到磁盘。
// screenshot-path null

// 动画设置。
// wiki 解释了如何配置单个动画：
// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    // 取消注释以关闭所有动画。
    // off

    // 将所有动画减慢此倍数。低于 1 的值会加速它们。
    slowdown 1.75
}

// 窗口规则让您调整单个窗口的行为。
// 在 wiki 上查找更多信息：
// https://github.com/YaLTeR/niri/wiki/Configuration:-Window-Rules

// 通过设置空的 default-column-width 来解决 WezTerm 的初始配置错误。
window-rule {
    // 此正则表达式故意做得尽可能具体，
    // 因为这是默认配置，我们不希望有误报。
    // 如果您愿意，可以只使用 app-id="wezterm"。
    match app-id=r#"^org\.wezfurlong\.wezterm$"#
    default-column-width {}
}

// 默认以浮动方式打开 Firefox 画中画播放器。
window-rule {
    // 此 app-id 正则表达式适用于两者：
    // - 主机 Firefox (app-id 是 "firefox")
    // - Flatpak Firefox (app-id 是 "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// 示例：阻止两个密码管理器出现在屏幕捕获中。
// （此示例规则在前面用 "/-" 注释掉了。）
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // 如果您希望它们在第三方截图工具中可见，请改用此项。
    // block-out-from "screencast"
}

// 示例：为所有窗口启用圆角。
// （此示例规则在前面用 "/-" 注释掉了。）
window-rule {
    geometry-corner-radius 6
    clip-to-geometry true
}

binds {
    // 键由用 + 号分隔的修饰符组成，最后跟一个 XKB 键名。
    // 要找到特定键的 XKB 名称，您可以使用 wev 等程序。
    //
    // "Mod" 是一个特殊修饰符，在 TTY 上运行时等于 Super，
    // 在作为 winit 窗口运行时等于 Alt。
    //
    // 您可以在此处绑定的大多数操作也可以通过 `niri msg action do-something` 以编程方式调用。

    // Mod-Shift-/，通常与 Mod-? 相同，
    // 显示重要热键列表。
    Mod+Shift+Slash { show-hotkey-overlay; }

    // 运行程序的建议绑定：终端、应用启动器、屏幕锁定器。
    Mod+Return hotkey-overlay-title="打开终端：rio" { spawn "rio"; }
    Mod+Slash hotkey-overlay-title="运行应用程序：fuzzel" { spawn "fuzzel"; }
    Super+Alt+L hotkey-overlay-title="锁定屏幕：swaylock" { spawn "swaylock"; }

    // 您也可以使用 shell。如果您需要管道、多个命令等，请执行此操作。
    // 注意：整个命令最后作为单个参数。
    // 例如，这是切换屏幕阅读器 (orca) 的标准绑定。
    Super+Alt+S hotkey-overlay-title=null { spawn "sh" "-c" "pkill orca || exec orca"; }

    // PipeWire 和 WirePlumber 的示例音量键映射。
    // allow-when-locked=true 属性使它们即使在会话锁定时也能工作。
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

    // brightnessctl 的示例亮度键映射。
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "+10%"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--class=backlight" "set" "10%-"; }

    // 打开/关闭概览：工作区和窗口的缩小视图。
    // 您也可以将鼠标移到左上角热角，
    // 或在触摸板上执行四指向上滑动。
    Mod+O repeat=false { toggle-overview; }

    Mod+Q repeat=false { close-window; }

    // ---------------------同一工作区//不同工作区-----------------
    // 移动焦点
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-down; }
    Mod+Up    { focus-window-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }
    // 移动窗口
    Mod+Shift+Left  { move-column-left; }
    Mod+Shift+Down  { move-window-down; }
    Mod+Shift+Up    { move-window-up; }
    Mod+Shift+Right { move-column-right; }
    Mod+Shift+H     { move-column-left; }
    Mod+Shift+J     { move-window-down; }
    Mod+Shift+K     { move-window-up; }
    Mod+Shift+L     { move-column-right; }
    //
    // 在到达列中第一个或最后一个窗口时跨工作区移动的替代命令。 
    // 我不太喜欢这么用，下面的用法破坏了工作区的隔离性
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Shift+J     { move-window-down-or-to-workspace-down; }
    // Mod+Shift+K     { move-window-up-or-to-workspace-up; }

    //  ----------显示器设置----------------
    // 焦点在显示器间转移
    Mod+Alt+Left  { focus-monitor-left; }
    Mod+Alt+Down  { focus-monitor-down; }
    Mod+Alt+Up    { focus-monitor-up; }
    Mod+Alt+Right { focus-monitor-right; }
    Mod+Alt+H     { focus-monitor-left; }
    Mod+Alt+J     { focus-monitor-down; }
    Mod+Alt+K     { focus-monitor-up; }
    Mod+Alt+L     { focus-monitor-right; }
    // 窗口在显示器间转移
    Mod+Alt+Shift+Left  { move-column-to-monitor-left; }
    Mod+Alt+Shift+Down  { move-column-to-monitor-down; }
    Mod+Alt+Shift+Up    { move-column-to-monitor-up; }
    Mod+Alt+Shift+Right { move-column-to-monitor-right; }
    Mod+Alt+Shift+H     { move-column-to-monitor-left; }
    Mod+Alt+Shift+J     { move-column-to-monitor-down; }
    Mod+Alt+Shift+K     { move-column-to-monitor-up; }
    Mod+Alt+Shift+L     { move-column-to-monitor-right; }

    // 有命令只移动单个窗口：
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    
    // 您还可以将整个工作区移动到另一个监视器：
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...   

    
    // 最后一个
    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Shift+Home { move-column-to-first; }
    Mod+Shift+End  { move-column-to-last; }
    Mod+Ctrl+Left  { focus-column-first; }
    Mod+Ctrl+Right { focus-column-last; }
    Mod+Ctrl+H     { focus-column-first; }
    Mod+Ctrl+L     { focus-column-last; }
    Mod+Ctrl+Shift+Left  { move-column-to-first; }
    Mod+Ctrl+Shift+Right { move-column-to-last; }
    Mod+Ctrl+Shift+H     { move-column-to-first; }
    Mod+Ctrl+Shift+L     { move-column-to-last; }


    Mod+Ctrl+J            { focus-workspace-down; }
    Mod+Ctrl+K            { focus-workspace-up; }
    Mod+Ctrl+Down         { focus-workspace-down; }
    Mod+Ctrl+Up           { focus-workspace-up; }
    Mod+Ctrl+Shift+Down   { move-column-to-workspace-down; }
    Mod+Ctrl+Shift+Up     { move-column-to-workspace-up; }
    Mod+Ctrl+Shift+J      { move-column-to-workspace-down; }
    Mod+Ctrl+Shift+K      { move-column-to-workspace-up; }

    // 或者，有命令只移动单个窗口：
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+D         { move-workspace-down; }
    Mod+Shift+U         { move-workspace-up; }

    // 您可以使用以下语法绑定鼠标滚轮滚动刻度。
    // 这些绑定将根据 natural-scroll 设置改变方向。
    //
    // 为了避免快速滚动工作区，您可以使用 cooldown-ms 属性。
    // 绑定将被限制为此值。
    // 您可以在任何绑定上设置冷却时间，但对滚轮最有用。
    Mod+Ctrl+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+Ctrl+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+Shift+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+Shift+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Shift+WheelScrollRight { move-column-right; }
    Mod+Shift+WheelScrollLeft  { move-column-left; }

    // 通常在应用程序中使用 Shift 上下滚动会导致水平滚动；这些绑定复制了这种行为。
    Mod+WheelScrollDown      { focus-column-right; }
    Mod+WheelScrollUp        { focus-column-left; }
    Mod+Shift+WheelScrollDown { move-column-right; }
    Mod+Shift+WheelScrollUp   { move-column-left; }

    // 同样，您可以绑定触摸板滚动"刻度"。
    // 触摸板滚动是连续的，所以对于这些绑定，它被分割成离散间隔。
    // 这些绑定也受触摸板的 natural-scroll 影响，所以这些示例绑定是"反向的"，
    // 因为我们默认为触摸板启用了 natural-scroll。
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // 您可以通过索引引用工作区。但是，请记住 niri 是一个动态工作区系统，
    // 所以这些命令有点"尽力而为"。尝试引用比当前工作区数量更大的工作区索引
    // 将引用最底部的（空）工作区。
    //
    // 例如，有 2 个工作区 + 1 个空的，索引 3、4、5 等
    // 都将引用第 3 个工作区。
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // 或者，有命令只移动单个窗口：
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // 在当前和之前的工作区之间切换焦点。
    // Mod+Tab { focus-workspace-previous; }

    // 以下绑定将聚焦的窗口移入和移出列。
    // 如果窗口单独存在，它们将其消费到侧边的附近列中。
    // 如果窗口已经在列中，它们将其排出。
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // 从右侧消费一个窗口到聚焦列的底部。
    Mod+Comma  { consume-window-into-column; }
    // 将聚焦列底部的窗口排出到右侧。
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+M { maximize-column; }
    Mod+Shift+M { fullscreen-window; }

    // 将聚焦的列扩展到其他完全可见列未占用的空间。
    // 使列"填充剩余空间"。
    Mod+F { expand-column-to-available-width; }

    Mod+C { center-column; }

    // 将屏幕上所有完全可见的列居中。
    Mod+Ctrl+C { center-visible-columns; }

    // 更精细的宽度调整。
    // 此命令还可以：
    // * 以像素设置宽度："1000"
    // * 以像素调整宽度："-5" 或 "+5"
    // * 将宽度设置为屏幕宽度的百分比："25%"
    // * 将宽度调整为屏幕宽度的百分比："-10%" 或 "+10%"
    // 像素大小使用逻辑像素或缩放像素。即在缩放为 2.0 的输出上，
    // set-column-width "100" 将使列占用 200 个物理屏幕像素。
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // 在与其他窗口的列中时更精细的高度调整。
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // 在浮动和平铺布局之间移动聚焦的窗口。
    Mod+Ctrl+F       { toggle-window-floating; }
    Mod+Shift+F { switch-focus-between-floating-and-tiling; }
    Mod+Shift+T { switch-focus-between-floating-and-tiling; }

    // 切换选项卡式列显示模式。
    // 此列中的窗口将显示为垂直选项卡，
    // 而不是堆叠在彼此之上。
    Mod+T { toggle-column-tabbed-display; }

    // 切换布局的操作。
    // 注意：如果您取消注释这些，请确保您在上面的 xkb 选项中没有
    // 配置匹配的布局切换热键。
    // 在同一个热键上同时有两者会破坏切换，
    // 因为它会在按下热键时切换两次（一次由 xkb，一次由 niri）。
    Mod+Shift+period { switch-layout "next"; }
    Mod+Shift+comma  { switch-layout "prev"; }

    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // 远程桌面客户端和软件 KVM 交换机等应用程序可能会要求 niri 
    // 停止处理此处定义的键盘快捷键，以便它们可以例如将按键原样转发到远程机器。
    // 绑定一个逃生舱口来切换抑制器是个好主意，
    // 这样有问题的应用程序就不会劫持您的会话。
    //
    // allow-inhibiting=false 属性也可以应用于其他绑定，
    // 这确保 niri 始终处理它们，即使抑制器处于活动状态。
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // quit 操作将显示确认对话框以避免意外退出。
    Mod+Shift+E { quit; }
    Ctrl+Alt+Delete { quit; }

    // 关闭监视器。要重新打开它们，执行任何输入，如移动鼠标或按任何其他键。
    Mod+Shift+P { power-off-monitors; }
}