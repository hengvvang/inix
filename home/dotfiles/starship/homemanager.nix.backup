{ config, lib, pkgs, ... }:

{
  config = lib.mkIf (config.myHome.dotfiles.enable && config.myHome.dotfiles.starship.enable && config.myHome.dotfiles.starship.method == "homemanager") {
    # Starship 提示符完整配置
    programs.starship = {
      # ===== 基础配置 =====
      enable = true;
      package = pkgs.starship;  # 指定 Starship 包
      
      # ===== Shell 集成配置 =====
      # 启用各种 shell 的集成支持
      enableBashIntegration = true;    # Bash 集成
      enableFishIntegration = true;    # Fish 集成
      enableZshIntegration = true;     # Zsh 集成
      enableNushellIntegration = false; # Nushell 集成，默认禁用
      enableIonIntegration = false;    # Ion 集成，默认禁用
      
      # ===== 高级功能配置 =====
      enableInteractive = true;        # 仅在交互式 shell 中启用
      enableTransience = false;        # 瞬态提示功能，替换旧提示为简化字符串
      
      # ===== 主要配置选项 =====
      settings = {
        # ===== 全局提示符设置 =====
        # 提示符基本行为
        add_newline = true;             # 在提示符间插入空行，提高可读性
        scan_timeout = 30;              # 扫描文件超时时间（毫秒），平衡性能和响应
        command_timeout = 500;          # 命令执行超时时间（毫秒）
        follow_symlinks = true;         # 是否跟随符号链接检查目录
        
        # ===== 提示符格式配置 =====
        # 自定义提示符布局（使用默认格式，可根据需要调整）
        format = lib.concatStrings [
          "$username"        # 用户名（在特定条件下显示）
          "$hostname"        # 主机名（SSH 连接时显示）
          "$directory"       # 当前目录
          "$git_branch"      # Git 分支
          "$git_status"      # Git 状态
          "$python"          # Python 版本
          "$nodejs"          # Node.js 版本
          "$rust"            # Rust 版本
          "$java"            # Java 版本
          "$golang"          # Go 版本
          "$package"         # 包版本
          "$cmd_duration"    # 命令执行时间
          "$line_break"      # 换行
          "$character"       # 提示符字符
        ];
        
        # ===== 右侧提示符 =====
        right_format = lib.concatStrings [
          "$time"           # 时间显示
        ];
        
        # ===== 字符模块配置 =====
        character = {
          success_symbol = "[❯](bold green)";      # 成功时的提示符
          error_symbol = "[❯](bold red)";          # 错误时的提示符
          vimcmd_symbol = "[❮](bold green)";       # Vim 命令模式
          vimcmd_visual_symbol = "[❮](bold yellow)"; # Vim 可视模式
        };
        
        # ===== 目录模块配置 =====
        directory = {
          truncation_length = 3;          # 目录截断长度
          truncate_to_repo = true;        # 截断到 Git 仓库根目录
          format = "[$path]($style)[$read_only]($read_only_style) ";
          style = "bold cyan";            # 目录样式
          read_only = "🔒";              # 只读目录标识
          read_only_style = "red";        # 只读样式
          home_symbol = "~";              # 家目录符号
          use_os_path_sep = true;         # 使用系统路径分隔符
        };
        
        # ===== Git 分支配置 =====
        git_branch = {
          always_show_remote = false;     # 不总是显示远程分支
          format = "on [$symbol$branch(:$remote_branch)]($style) ";
          symbol = " ";                  # Git 分支符号
          style = "bold purple";          # Git 分支样式
          truncation_length = 20;         # 分支名截断长度
          truncation_symbol = "…";        # 截断符号
          only_attached = false;          # 在分离 HEAD 时也显示
        };
        
        # ===== Git 状态配置 =====
        git_status = {
          format = "([$all_status$ahead_behind]($style) )";
          style = "bold red";             # Git 状态样式
          # 状态符号配置
          conflicted = "=";               # 冲突状态
          ahead = "⇡";                   # 领先状态
          behind = "⇣";                  # 落后状态
          diverged = "⇕";                # 分歧状态
          up_to_date = "✓";              # 最新状态
          untracked = "?";               # 未跟踪文件
          stashed = "$";                 # 存储状态
          modified = "!";                # 修改状态
          staged = "+";                  # 暂存状态
          renamed = "»";                 # 重命名状态
          deleted = "✘";                 # 删除状态
        };
        
        # ===== 命令执行时间配置 =====
        cmd_duration = {
          min_time = 2000;               # 最小显示时间（毫秒）
          format = "took [$duration]($style) ";
          style = "bold yellow";          # 执行时间样式
          show_milliseconds = false;      # 不显示毫秒
        };
        
        # ===== 时间模块配置 =====
        time = {
          disabled = false;               # 启用时间显示
          format = "at [$time]($style) "; # 时间格式
          style = "bold blue";            # 时间样式
          time_format = "%H:%M:%S";       # 24小时格式
          utc_time_offset = "local";      # 使用本地时区
        };
        
        # ===== 编程语言模块配置 =====
        # Python 配置
        python = {
          format = "via [🐍 $version($virtualenv )]($style)";
          style = "yellow bold";
          detect_extensions = [ "py" ];   # 检测 Python 文件
          detect_files = [ "requirements.txt" "pyproject.toml" ".python-version" ];
          pyenv_version_name = false;     # 不显示 pyenv 版本名
        };
        
        # Node.js 配置
        nodejs = {
          format = "via [ $version]($style) ";
          style = "bold green";
          detect_extensions = [ "js" "mjs" "cjs" "ts" ];
          detect_files = [ "package.json" ".node-version" ".nvmrc" ];
        };
        
        # Rust 配置
        rust = {
          format = "via [🦀 $version]($style) ";
          style = "bold red";
          detect_extensions = [ "rs" ];
          detect_files = [ "Cargo.toml" ];
        };
        
        # Go 配置
        golang = {
          format = "via [🐹 $version]($style) ";
          style = "bold cyan";
          detect_extensions = [ "go" ];
          detect_files = [ "go.mod" "go.sum" ".go-version" ];
        };
        
        # Java 配置
        java = {
          format = "via [☕ $version]($style) ";
          style = "red dimmed";
          detect_extensions = [ "java" "class" "jar" ];
          detect_files = [ "pom.xml" "build.gradle.kts" ".java-version" ];
        };
        
        # ===== 其他有用模块配置 =====
        # 包版本配置
        package = {
          format = "is [📦 $version]($style) ";
          style = "bold 208";
          display_private = false;        # 不显示私有包
        };
        
        # 用户名配置
        username = {
          style_user = "white bold";      # 普通用户样式
          style_root = "black bold";      # root 用户样式
          format = "[$user]($style) in ";
          disabled = false;               # 在特定条件下显示
          show_always = false;            # 不总是显示
        };
        
        # 主机名配置
        hostname = {
          ssh_only = true;                # 仅在 SSH 连接时显示
          format = "on [$hostname]($style) ";
          style = "bold dimmed green";
          disabled = false;
        };
        
        # ===== 性能优化配置 =====
        # 禁用一些不常用的模块以提高性能
        azure.disabled = true;           # 禁用 Azure 模块
        aws.disabled = true;             # 禁用 AWS 模块
        gcloud.disabled = true;          # 禁用 Google Cloud 模块
        kubernetes.disabled = true;       # 禁用 Kubernetes 模块
        docker_context.disabled = true;  # 禁用 Docker 上下文
        
        # 其他语言模块（根据需要启用/禁用）
        c.disabled = true;               # 禁用 C 模块
        cpp.disabled = true;             # 禁用 C++ 模块
        dotnet.disabled = true;          # 禁用 .NET 模块
        php.disabled = true;             # 禁用 PHP 模块
        ruby.disabled = true;            # 禁用 Ruby 模块
        lua.disabled = true;             # 禁用 Lua 模块
        julia.disabled = true;           # 禁用 Julia 模块
        kotlin.disabled = true;          # 禁用 Kotlin 模块
        scala.disabled = true;           # 禁用 Scala 模块
        swift.disabled = true;           # 禁用 Swift 模块
        
        # ===== 系统信息模块 =====
        # 内存使用（默认禁用，性能考虑）
        memory_usage = {
          disabled = true;               # 禁用内存使用显示
          threshold = 75;                # 内存使用阈值
          format = "via $symbol [\${ram}]($style) ";
          symbol = "🐏";
        };
        
        # 电池状态（笔记本电脑有用）
        battery = {
          full_symbol = "🔋 ";
          charging_symbol = "⚡️ ";
          discharging_symbol = "💀 ";
          format = "[$symbol$percentage]($style) ";
          disabled = false;              # 启用电池状态
          
          # 电池显示阈值配置
          display = [
            {
              threshold = 10;
              style = "bold red";
            }
            {
              threshold = 30;
              style = "bold yellow";
            }
          ];
        };
        
        # Shell 指示器（默认禁用）
        shell = {
          disabled = true;               # 禁用 shell 指示器
          bash_indicator = "bsh";
          fish_indicator = "fsh";
          zsh_indicator = "zsh";
          format = "[$indicator]($style) ";
          style = "white bold";
        };
      };
    };
  };
}
